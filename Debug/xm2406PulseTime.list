
xm2406PulseTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c5c  08003c5c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000724  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000730  20000730  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cfe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e1  00000000  00000000  0000dd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0000f720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058c  00000000  00000000  0000fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9c8  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fdd  00000000  00000000  0002fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf070  00000000  00000000  00039da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8e11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001be8  00000000  00000000  000f8e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000faa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c1c 	.word	0x08003c1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c1c 	.word	0x08003c1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ce:	4b24      	ldr	r3, [pc, #144]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_DMA_Init+0xa8>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	200c      	movs	r0, #12
 80004fc:	f000 fe93 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000500:	200c      	movs	r0, #12
 8000502:	f000 feac 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	200e      	movs	r0, #14
 800050c:	f000 fe8b 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000510:	200e      	movs	r0, #14
 8000512:	f000 fea4 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	2010      	movs	r0, #16
 800051c:	f000 fe83 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000520:	2010      	movs	r0, #16
 8000522:	f000 fe9c 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	2011      	movs	r0, #17
 800052c:	f000 fe7b 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000530:	2011      	movs	r0, #17
 8000532:	f000 fe94 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	203a      	movs	r0, #58	@ 0x3a
 800053c:	f000 fe73 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000540:	203a      	movs	r0, #58	@ 0x3a
 8000542:	f000 fe8c 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	2046      	movs	r0, #70	@ 0x46
 800054c:	f000 fe6b 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000550:	2046      	movs	r0, #70	@ 0x46
 8000552:	f000 fe84 	bl	800125e <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <MX_GPIO_Init+0x84>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <MX_GPIO_Init+0x84>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <MX_GPIO_Init+0x84>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_GPIO_Init+0x84>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_GPIO_Init+0x84>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_GPIO_Init+0x84>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fccc 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f83c 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f7ff ffb4 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f7ff ff5c 	bl	80004b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000600:	f000 fa1e 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fa46 	bl	8000a94 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000608:	f000 fa6e 	bl	8000ae8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <main+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <main+0x74>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f042 0210 	orr.w	r2, r2, #16
 800061a:	60da      	str	r2, [r3, #12]
  // 开启DMA接收数据通道，将串口数据存到buf数组。
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, 100);
 800061c:	2264      	movs	r2, #100	@ 0x64
 800061e:	4911      	ldr	r1, [pc, #68]	@ (8000664 <main+0x78>)
 8000620:	480f      	ldr	r0, [pc, #60]	@ (8000660 <main+0x74>)
 8000622:	f002 f92d 	bl	8002880 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <main+0x7c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <main+0x7c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f042 0210 	orr.w	r2, r2, #16
 8000634:	60da      	str	r2, [r3, #12]
  // 开启DMA接收数据通道，将串口数据存到buf数组。
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx_buffer, 100);
 8000636:	2264      	movs	r2, #100	@ 0x64
 8000638:	490a      	ldr	r1, [pc, #40]	@ (8000664 <main+0x78>)
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <main+0x7c>)
 800063c:	f002 f920 	bl	8002880 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <main+0x80>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <main+0x80>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f042 0210 	orr.w	r2, r2, #16
 800064e:	60da      	str	r2, [r3, #12]
  // 开启DMA接收数据通道，将串口数据存到buf数组。
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_buffer, 100);
 8000650:	2264      	movs	r2, #100	@ 0x64
 8000652:	4904      	ldr	r1, [pc, #16]	@ (8000664 <main+0x78>)
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <main+0x80>)
 8000656:	f002 f913 	bl	8002880 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x6e>
 800065e:	bf00      	nop
 8000660:	20000414 	.word	0x20000414
 8000664:	20000028 	.word	0x20000028
 8000668:	2000045c 	.word	0x2000045c
 800066c:	200004a4 	.word	0x200004a4

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 faa0 	bl	8003bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	@ (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e4:	23a8      	movs	r3, #168	@ 0xa8
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fb6b 	bl	8001dd0 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 f820 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000710:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2105      	movs	r1, #5
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fdcc 	bl	80022c0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 f809 	bl	8000744 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 fc1b 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <DMA1_Stream1_IRQHandler+0x10>)
 8000806:	f000 fedd 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000066c 	.word	0x2000066c

08000814 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000818:	4802      	ldr	r0, [pc, #8]	@ (8000824 <DMA1_Stream3_IRQHandler+0x10>)
 800081a:	f000 fed3 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200006cc 	.word	0x200006cc

08000828 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800082c:	4802      	ldr	r0, [pc, #8]	@ (8000838 <DMA1_Stream5_IRQHandler+0x10>)
 800082e:	f000 fec9 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200005ac 	.word	0x200005ac

0800083c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000840:	4802      	ldr	r0, [pc, #8]	@ (800084c <DMA1_Stream6_IRQHandler+0x10>)
 8000842:	f000 febf 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000060c 	.word	0x2000060c

08000850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000856:	481d      	ldr	r0, [pc, #116]	@ (80008cc <USART1_IRQHandler+0x7c>)
 8000858:	f002 f8b6 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  // 获取IDLE状态
  	uint8_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <USART1_IRQHandler+0x7c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	2b10      	cmp	r3, #16
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	71fb      	strb	r3, [r7, #7]
  	if((tmp_flag != RESET))	// 判断接收是否结束
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d024      	beq.n	80008c2 <USART1_IRQHandler+0x72>
  	{
  		__HAL_UART_CLEAR_IDLEFLAG(&huart1);	// 清除空闲中断标志
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <USART1_IRQHandler+0x7c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <USART1_IRQHandler+0x7c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  		HAL_UART_DMAStop(&huart1); 			// 停止DMA通道
 800088e:	480f      	ldr	r0, [pc, #60]	@ (80008cc <USART1_IRQHandler+0x7c>)
 8000890:	f002 f81b 	bl	80028ca <HAL_UART_DMAStop>
  		// 查询DMA剩余传输数据个数
  		uint8_t temp = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <USART1_IRQHandler+0x80>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	71bb      	strb	r3, [r7, #6]
  		//	最大接收长度 - 剩余长度 = 已发送长度
  		rx_len = 100 - temp;
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <USART1_IRQHandler+0x84>)
 80008a6:	701a      	strb	r2, [r3, #0]
  		/* === 在下面写自己的处理逻辑（注意这里是中断，尽量简短） === */

  		// 发送接收到的数据
  		HAL_UART_Transmit_DMA(&huart1, rx_buffer, rx_len);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <USART1_IRQHandler+0x84>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	4909      	ldr	r1, [pc, #36]	@ (80008d8 <USART1_IRQHandler+0x88>)
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <USART1_IRQHandler+0x7c>)
 80008b4:	f001 ff74 	bl	80027a0 <HAL_UART_Transmit_DMA>

  		/* === 在上面写自己的处理逻辑（注意这里是中断，尽量简短） === */
  		// 重新开启DMA
  		HAL_UART_Receive_DMA(&huart1,rx_buffer,100);
 80008b8:	2264      	movs	r2, #100	@ 0x64
 80008ba:	4907      	ldr	r1, [pc, #28]	@ (80008d8 <USART1_IRQHandler+0x88>)
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <USART1_IRQHandler+0x7c>)
 80008be:	f001 ffdf 	bl	8002880 <HAL_UART_Receive_DMA>
  	}
  /* USER CODE END USART1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000414 	.word	0x20000414
 80008d0:	200004ec 	.word	0x200004ec
 80008d4:	20000410 	.word	0x20000410
 80008d8:	20000028 	.word	0x20000028

080008dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e2:	481d      	ldr	r0, [pc, #116]	@ (8000958 <USART2_IRQHandler+0x7c>)
 80008e4:	f002 f870 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  // 获取IDLE状态
  	uint8_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <USART2_IRQHandler+0x7c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	71fb      	strb	r3, [r7, #7]
  	if((tmp_flag != RESET))	// 判断接收是否结束
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d024      	beq.n	800094e <USART2_IRQHandler+0x72>
  	{
  		__HAL_UART_CLEAR_IDLEFLAG(&huart2);	// 清除空闲中断标志
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <USART2_IRQHandler+0x7c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <USART2_IRQHandler+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  		HAL_UART_DMAStop(&huart2); 			// 停止DMA通道
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <USART2_IRQHandler+0x7c>)
 800091c:	f001 ffd5 	bl	80028ca <HAL_UART_DMAStop>
  		// 查询DMA剩余传输数据个数
  		uint8_t temp = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <USART2_IRQHandler+0x80>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	71bb      	strb	r3, [r7, #6]
  		//	最大接收长度 - 剩余长度 = 已发送长度
  		rx_len = 100 - temp;
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <USART2_IRQHandler+0x84>)
 8000932:	701a      	strb	r2, [r3, #0]
  		/* === 在下面写自己的处理逻辑（注意这里是中断，尽量简短） === */

  		// 发送接收到的数据
  		HAL_UART_Transmit_DMA(&huart2, rx_buffer, rx_len);
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <USART2_IRQHandler+0x84>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4909      	ldr	r1, [pc, #36]	@ (8000964 <USART2_IRQHandler+0x88>)
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <USART2_IRQHandler+0x7c>)
 8000940:	f001 ff2e 	bl	80027a0 <HAL_UART_Transmit_DMA>

  		/* === 在上面写自己的处理逻辑（注意这里是中断，尽量简短） === */
  		// 重新开启DMA
  		HAL_UART_Receive_DMA(&huart2,rx_buffer,100);
 8000944:	2264      	movs	r2, #100	@ 0x64
 8000946:	4907      	ldr	r1, [pc, #28]	@ (8000964 <USART2_IRQHandler+0x88>)
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <USART2_IRQHandler+0x7c>)
 800094a:	f001 ff99 	bl	8002880 <HAL_UART_Receive_DMA>
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000045c 	.word	0x2000045c
 800095c:	200005ac 	.word	0x200005ac
 8000960:	20000410 	.word	0x20000410
 8000964:	20000028 	.word	0x20000028

08000968 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800096e:	481d      	ldr	r0, [pc, #116]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 8000970:	f002 f82a 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  // 获取IDLE状态
  	uint8_t tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	2b10      	cmp	r3, #16
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	71fb      	strb	r3, [r7, #7]
  	if((tmp_flag != RESET))	// 判断接收是否结束
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d024      	beq.n	80009da <USART3_IRQHandler+0x72>
  	{
  		__HAL_UART_CLEAR_IDLEFLAG(&huart3);	// 清除空闲中断标志
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  		HAL_UART_DMAStop(&huart3); 			// 停止DMA通道
 80009a6:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 80009a8:	f001 ff8f 	bl	80028ca <HAL_UART_DMAStop>
  		// 查询DMA剩余传输数据个数
  		uint8_t temp = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <USART3_IRQHandler+0x80>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	71bb      	strb	r3, [r7, #6]
  		//	最大接收长度 - 剩余长度 = 已发送长度
  		rx_len = 100 - temp;
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <USART3_IRQHandler+0x84>)
 80009be:	701a      	strb	r2, [r3, #0]
  		/* === 在下面写自己的处理逻辑（注意这里是中断，尽量简短） === */

  		// 发送接收到的数据
  		HAL_UART_Transmit_DMA(&huart3, rx_buffer, rx_len);
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <USART3_IRQHandler+0x84>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	4909      	ldr	r1, [pc, #36]	@ (80009f0 <USART3_IRQHandler+0x88>)
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 80009cc:	f001 fee8 	bl	80027a0 <HAL_UART_Transmit_DMA>

  		/* === 在上面写自己的处理逻辑（注意这里是中断，尽量简短） === */
  		// 重新开启DMA
  		HAL_UART_Receive_DMA(&huart3,rx_buffer,100);
 80009d0:	2264      	movs	r2, #100	@ 0x64
 80009d2:	4907      	ldr	r1, [pc, #28]	@ (80009f0 <USART3_IRQHandler+0x88>)
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <USART3_IRQHandler+0x7c>)
 80009d6:	f001 ff53 	bl	8002880 <HAL_UART_Receive_DMA>
  	}
  /* USER CODE END USART3_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200004a4 	.word	0x200004a4
 80009e8:	2000066c 	.word	0x2000066c
 80009ec:	20000410 	.word	0x20000410
 80009f0:	20000028 	.word	0x20000028

080009f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <DMA2_Stream2_IRQHandler+0x10>)
 80009fa:	f000 fde3 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200004ec 	.word	0x200004ec

08000a08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <DMA2_Stream7_IRQHandler+0x10>)
 8000a0e:	f000 fdd9 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000054c 	.word	0x2000054c

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f001 fe42 	bl	8002700 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f7ff fe5f 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000414 	.word	0x20000414
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f001 fe18 	bl	8002700 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f7ff fe35 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000045c 	.word	0x2000045c
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_USART3_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b20:	f001 fdee 	bl	8002700 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff fe0b 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200004a4 	.word	0x200004a4
 8000b38:	40004800 	.word	0x40004800

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a96      	ldr	r2, [pc, #600]	@ (8000db4 <HAL_UART_MspInit+0x278>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	f040 8092 	bne.w	8000c84 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	4b94      	ldr	r3, [pc, #592]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b68:	4a93      	ldr	r2, [pc, #588]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b70:	4b91      	ldr	r3, [pc, #580]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	4b8d      	ldr	r3, [pc, #564]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a8c      	ldr	r2, [pc, #560]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000baa:	2307      	movs	r3, #7
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4881      	ldr	r0, [pc, #516]	@ (8000dbc <HAL_UART_MspInit+0x280>)
 8000bb6:	f000 ff6f 	bl	8001a98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000bba:	4b81      	ldr	r3, [pc, #516]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bbc:	4a81      	ldr	r2, [pc, #516]	@ (8000dc4 <HAL_UART_MspInit+0x288>)
 8000bbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bce:	4b7c      	ldr	r3, [pc, #496]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd4:	4b7a      	ldr	r3, [pc, #488]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bdc:	4b78      	ldr	r3, [pc, #480]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000be2:	4b77      	ldr	r3, [pc, #476]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000be8:	4b75      	ldr	r3, [pc, #468]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b74      	ldr	r3, [pc, #464]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf4:	4b72      	ldr	r3, [pc, #456]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bfa:	4871      	ldr	r0, [pc, #452]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000bfc:	f000 fb4a 	bl	8001294 <HAL_DMA_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c06:	f7ff fd9d 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a6c      	ldr	r2, [pc, #432]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c10:	4a6b      	ldr	r2, [pc, #428]	@ (8000dc0 <HAL_UART_MspInit+0x284>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c16:	4b6c      	ldr	r3, [pc, #432]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c18:	4a6c      	ldr	r2, [pc, #432]	@ (8000dcc <HAL_UART_MspInit+0x290>)
 8000c1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c22:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c24:	4b68      	ldr	r3, [pc, #416]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c26:	2240      	movs	r2, #64	@ 0x40
 8000c28:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b67      	ldr	r3, [pc, #412]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b65      	ldr	r3, [pc, #404]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c38:	4b63      	ldr	r3, [pc, #396]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3e:	4b62      	ldr	r3, [pc, #392]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c44:	4b60      	ldr	r3, [pc, #384]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c50:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c56:	485c      	ldr	r0, [pc, #368]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c58:	f000 fb1c 	bl	8001294 <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c62:	f7ff fd6f 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c6c:	4a56      	ldr	r2, [pc, #344]	@ (8000dc8 <HAL_UART_MspInit+0x28c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	2025      	movs	r0, #37	@ 0x25
 8000c78:	f000 fad5 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7c:	2025      	movs	r0, #37	@ 0x25
 8000c7e:	f000 faee 	bl	800125e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c82:	e146      	b.n	8000f12 <HAL_UART_MspInit+0x3d6>
  else if(uartHandle->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a51      	ldr	r2, [pc, #324]	@ (8000dd0 <HAL_UART_MspInit+0x294>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 80aa 	bne.w	8000de4 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	4b48      	ldr	r3, [pc, #288]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	4a47      	ldr	r2, [pc, #284]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca0:	4b45      	ldr	r3, [pc, #276]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	4b41      	ldr	r3, [pc, #260]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a40      	ldr	r2, [pc, #256]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000db8 <HAL_UART_MspInit+0x27c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4836      	ldr	r0, [pc, #216]	@ (8000dbc <HAL_UART_MspInit+0x280>)
 8000ce4:	f000 fed8 	bl	8001a98 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000cea:	4a3b      	ldr	r2, [pc, #236]	@ (8000dd8 <HAL_UART_MspInit+0x29c>)
 8000cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cee:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000cf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf6:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0a:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d10:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d16:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d28:	482a      	ldr	r0, [pc, #168]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d2a:	f000 fab3 	bl	8001294 <HAL_DMA_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000d34:	f7ff fd06 	bl	8000744 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a26      	ldr	r2, [pc, #152]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d3e:	4a25      	ldr	r2, [pc, #148]	@ (8000dd4 <HAL_UART_MspInit+0x298>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d46:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <HAL_UART_MspInit+0x2a4>)
 8000d48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d52:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d54:	2240      	movs	r2, #64	@ 0x40
 8000d56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d58:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d64:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d84:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d86:	f000 fa85 	bl	8001294 <HAL_DMA_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000d90:	f7ff fcd8 	bl	8000744 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_UART_MspInit+0x2a0>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2101      	movs	r1, #1
 8000da4:	2026      	movs	r0, #38	@ 0x26
 8000da6:	f000 fa3e 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000daa:	2026      	movs	r0, #38	@ 0x26
 8000dac:	f000 fa57 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000db0:	e0af      	b.n	8000f12 <HAL_UART_MspInit+0x3d6>
 8000db2:	bf00      	nop
 8000db4:	40011000 	.word	0x40011000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	200004ec 	.word	0x200004ec
 8000dc4:	40026440 	.word	0x40026440
 8000dc8:	2000054c 	.word	0x2000054c
 8000dcc:	400264b8 	.word	0x400264b8
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	200005ac 	.word	0x200005ac
 8000dd8:	40026088 	.word	0x40026088
 8000ddc:	2000060c 	.word	0x2000060c
 8000de0:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f1c <HAL_UART_MspInit+0x3e0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	f040 8091 	bne.w	8000f12 <HAL_UART_MspInit+0x3d6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000dfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e00:	4b47      	ldr	r3, [pc, #284]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a42      	ldr	r2, [pc, #264]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <HAL_UART_MspInit+0x3e4>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4837      	ldr	r0, [pc, #220]	@ (8000f24 <HAL_UART_MspInit+0x3e8>)
 8000e46:	f000 fe27 	bl	8001a98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e4c:	4a37      	ldr	r2, [pc, #220]	@ (8000f2c <HAL_UART_MspInit+0x3f0>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000e50:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e8a:	4827      	ldr	r0, [pc, #156]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e8c:	f000 fa02 	bl	8001294 <HAL_DMA_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0x35e>
      Error_Handler();
 8000e96:	f7ff fc55 	bl	8000744 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a22      	ldr	r2, [pc, #136]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ea0:	4a21      	ldr	r2, [pc, #132]	@ (8000f28 <HAL_UART_MspInit+0x3ec>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ea8:	4a22      	ldr	r2, [pc, #136]	@ (8000f34 <HAL_UART_MspInit+0x3f8>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000eac:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000eb6:	2240      	movs	r2, #64	@ 0x40
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ee6:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000ee8:	f000 f9d4 	bl	8001294 <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8000ef2:	f7ff fc27 	bl	8000744 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000efa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <HAL_UART_MspInit+0x3f4>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2101      	movs	r1, #1
 8000f06:	2027      	movs	r0, #39	@ 0x27
 8000f08:	f000 f98d 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f0c:	2027      	movs	r0, #39	@ 0x27
 8000f0e:	f000 f9a6 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	@ 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	2000066c 	.word	0x2000066c
 8000f2c:	40026028 	.word	0x40026028
 8000f30:	200006cc 	.word	0x200006cc
 8000f34:	40026058 	.word	0x40026058

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f3c:	f7ff fd6e 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f002 fe35 	bl	8003bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb3f 	bl	80005ec <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f7c:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8000f80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f84:	20000730 	.word	0x20000730

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f92b 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fbc6 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f943 	bl	800127a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f90b 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	2000072c 	.word	0x2000072c

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000072c 	.word	0x2000072c

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	@ (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	@ (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff3e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff31 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff feda 	bl	8001058 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e099      	b.n	80013e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d0:	e00f      	b.n	80012f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012d2:	f7ff fec1 	bl	8001058 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d908      	bls.n	80012f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2220      	movs	r2, #32
 80012e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e078      	b.n	80013e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e8      	bne.n	80012d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4b38      	ldr	r3, [pc, #224]	@ (80013ec <HAL_DMA_Init+0x158>)
 800130c:	4013      	ands	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4313      	orrs	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	2b04      	cmp	r3, #4
 800134a:	d107      	bne.n	800135c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	4313      	orrs	r3, r2
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f023 0307 	bic.w	r3, r3, #7
 8001372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	4313      	orrs	r3, r2
 800137c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	2b04      	cmp	r3, #4
 8001384:	d117      	bne.n	80013b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00e      	beq.n	80013b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fb01 	bl	80019a0 <DMA_CheckFifoParam>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2240      	movs	r2, #64	@ 0x40
 80013a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013b2:	2301      	movs	r3, #1
 80013b4:	e016      	b.n	80013e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fab8 	bl	8001934 <DMA_CalcBaseAndBitshift>
 80013c4:	4603      	mov	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013cc:	223f      	movs	r2, #63	@ 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	f010803f 	.word	0xf010803f

080013f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_DMA_Start_IT+0x26>
 8001412:	2302      	movs	r3, #2
 8001414:	e040      	b.n	8001498 <HAL_DMA_Start_IT+0xa8>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d12f      	bne.n	800148a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fa4a 	bl	80018d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001448:	223f      	movs	r2, #63	@ 0x3f
 800144a:	409a      	lsls	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0216 	orr.w	r2, r2, #22
 800145e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0208 	orr.w	r2, r2, #8
 8001476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e005      	b.n	8001496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001492:	2302      	movs	r3, #2
 8001494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001496:	7dfb      	ldrb	r3, [r7, #23]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ae:	f7ff fdd3 	bl	8001058 <HAL_GetTick>
 80014b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d008      	beq.n	80014d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e052      	b.n	8001578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0216 	bic.w	r2, r2, #22
 80014e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <HAL_DMA_Abort+0x62>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0208 	bic.w	r2, r2, #8
 8001510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001522:	e013      	b.n	800154c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001524:	f7ff fd98 	bl	8001058 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b05      	cmp	r3, #5
 8001530:	d90c      	bls.n	800154c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2220      	movs	r2, #32
 8001536:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e015      	b.n	8001578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e4      	bne.n	8001524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155e:	223f      	movs	r2, #63	@ 0x3f
 8001560:	409a      	lsls	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d004      	beq.n	800159e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00c      	b.n	80015b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2205      	movs	r2, #5
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015d0:	4b8e      	ldr	r3, [pc, #568]	@ (800180c <HAL_DMA_IRQHandler+0x248>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a8e      	ldr	r2, [pc, #568]	@ (8001810 <HAL_DMA_IRQHandler+0x24c>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	2208      	movs	r2, #8
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01a      	beq.n	8001630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	2208      	movs	r2, #8
 800161e:	409a      	lsls	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d012      	beq.n	8001666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165e:	f043 0202 	orr.w	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166a:	2204      	movs	r2, #4
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d012      	beq.n	800169c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	2204      	movs	r2, #4
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	f043 0204 	orr.w	r2, r3, #4
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	2210      	movs	r2, #16
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d043      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03c      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016be:	2210      	movs	r2, #16
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d018      	beq.n	8001706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	4798      	blx	r3
 80016f2:	e01f      	b.n	8001734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01b      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
 8001704:	e016      	b.n	8001734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0208 	bic.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001738:	2220      	movs	r2, #32
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 808f 	beq.w	8001864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8087 	beq.w	8001864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	2220      	movs	r2, #32
 800175c:	409a      	lsls	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b05      	cmp	r3, #5
 800176c:	d136      	bne.n	80017dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0216 	bic.w	r2, r2, #22
 800177c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800178c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_DMA_IRQHandler+0x1da>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b2:	223f      	movs	r2, #63	@ 0x3f
 80017b4:	409a      	lsls	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d07e      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
        }
        return;
 80017da:	e079      	b.n	80018d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01d      	beq.n	8001826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10d      	bne.n	8001814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d031      	beq.n	8001864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e02c      	b.n	8001864 <HAL_DMA_IRQHandler+0x2a0>
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000
 8001810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d023      	beq.n	8001864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
 8001824:	e01e      	b.n	8001864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10f      	bne.n	8001854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0210 	bic.w	r2, r2, #16
 8001842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d032      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d022      	beq.n	80018be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2205      	movs	r2, #5
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	3301      	adds	r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d307      	bcc.n	80018ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f2      	bne.n	8001890 <HAL_DMA_IRQHandler+0x2cc>
 80018aa:	e000      	b.n	80018ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
 80018ce:	e000      	b.n	80018d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018d0:	bf00      	nop
    }
  }
}
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b40      	cmp	r3, #64	@ 0x40
 8001904:	d108      	bne.n	8001918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001916:	e007      	b.n	8001928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3b10      	subs	r3, #16
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <DMA_CalcBaseAndBitshift+0x64>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <DMA_CalcBaseAndBitshift+0x68>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d909      	bls.n	8001976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
 8001974:	e007      	b.n	8001986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	aaaaaaab 	.word	0xaaaaaaab
 800199c:	08003c4c 	.word	0x08003c4c

080019a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d11f      	bne.n	80019fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d856      	bhi.n	8001a6e <DMA_CheckFifoParam+0xce>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <DMA_CheckFifoParam+0x28>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019eb 	.word	0x080019eb
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	08001a6f 	.word	0x08001a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d046      	beq.n	8001a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e8:	e043      	b.n	8001a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019f2:	d140      	bne.n	8001a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f8:	e03d      	b.n	8001a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a02:	d121      	bne.n	8001a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d837      	bhi.n	8001a7a <DMA_CheckFifoParam+0xda>
 8001a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <DMA_CheckFifoParam+0x70>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a27 	.word	0x08001a27
 8001a18:	08001a21 	.word	0x08001a21
 8001a1c:	08001a39 	.word	0x08001a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      break;
 8001a24:	e030      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d025      	beq.n	8001a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a36:	e022      	b.n	8001a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a40:	d11f      	bne.n	8001a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a46:	e01c      	b.n	8001a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d903      	bls.n	8001a56 <DMA_CheckFifoParam+0xb6>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d003      	beq.n	8001a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a54:	e018      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5a:	e015      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6c:	e00b      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e00a      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e008      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e006      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e004      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e002      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
    }
  } 
  
  return status; 
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e16b      	b.n	8001d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 815a 	bne.w	8001d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d005      	beq.n	8001aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d017      	beq.n	8001b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d123      	bne.n	8001bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80b4 	beq.w	8001d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b60      	ldr	r3, [pc, #384]	@ (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a5f      	ldr	r2, [pc, #380]	@ (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001da8 <HAL_GPIO_Init+0x310>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	@ (8001dac <HAL_GPIO_Init+0x314>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	@ (8001db0 <HAL_GPIO_Init+0x318>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	@ (8001db4 <HAL_GPIO_Init+0x31c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	@ (8001db8 <HAL_GPIO_Init+0x320>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	@ (8001dbc <HAL_GPIO_Init+0x324>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x216>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x212>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x20a>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00e      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	@ (8001da8 <HAL_GPIO_Init+0x310>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a27      	ldr	r2, [pc, #156]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d32:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d56:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d80:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae90 	bls.w	8001ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e267      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d075      	beq.n	8001eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dee:	4b88      	ldr	r3, [pc, #544]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d00c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b85      	ldr	r3, [pc, #532]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d112      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e06:	4b82      	ldr	r3, [pc, #520]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e12:	d10b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	4b7e      	ldr	r3, [pc, #504]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d05b      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x108>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d157      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e242      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_OscConfig+0x74>
 8001e36:	4b76      	ldr	r3, [pc, #472]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a75      	ldr	r2, [pc, #468]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xb0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b70      	ldr	r3, [pc, #448]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6f      	ldr	r2, [pc, #444]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xb0>
 8001e68:	4b69      	ldr	r3, [pc, #420]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a68      	ldr	r2, [pc, #416]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff f8e6 	bl	8001058 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff f8e2 	bl	8001058 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	@ 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e207      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xc0>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f8d2 	bl	8001058 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f8ce 	bl	8001058 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	@ 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1f3      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xe8>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efe:	4b44      	ldr	r3, [pc, #272]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b41      	ldr	r3, [pc, #260]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x152>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1c7      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4937      	ldr	r1, [pc, #220]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e03a      	b.n	8001fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <HAL_RCC_OscConfig+0x244>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff f887 	bl	8001058 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7ff f883 	bl	8001058 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1a8      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	4b2b      	ldr	r3, [pc, #172]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4925      	ldr	r1, [pc, #148]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <HAL_RCC_OscConfig+0x244>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f866 	bl	8001058 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff f862 	bl	8001058 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e187      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d036      	beq.n	8002028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_RCC_OscConfig+0x248>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f846 	bl	8001058 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff f842 	bl	8001058 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e167      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x200>
 8001fee:	e01b      	b.n	8002028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_RCC_OscConfig+0x248>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f82f 	bl	8001058 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	e00e      	b.n	800201c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f82b 	bl	8001058 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d907      	bls.n	800201c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e150      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
 8002010:	40023800 	.word	0x40023800
 8002014:	42470000 	.word	0x42470000
 8002018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ea      	bne.n	8001ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8097 	beq.w	8002164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b81      	ldr	r3, [pc, #516]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b7d      	ldr	r3, [pc, #500]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a7c      	ldr	r2, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b7a      	ldr	r3, [pc, #488]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b77      	ldr	r3, [pc, #476]	@ (8002244 <HAL_RCC_OscConfig+0x474>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b74      	ldr	r3, [pc, #464]	@ (8002244 <HAL_RCC_OscConfig+0x474>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a73      	ldr	r2, [pc, #460]	@ (8002244 <HAL_RCC_OscConfig+0x474>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe ffeb 	bl	8001058 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe ffe7 	bl	8001058 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e10c      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b6a      	ldr	r3, [pc, #424]	@ (8002244 <HAL_RCC_OscConfig+0x474>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x2ea>
 80020ac:	4b64      	ldr	r3, [pc, #400]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	4a63      	ldr	r2, [pc, #396]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x324>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x30c>
 80020c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x324>
 80020dc:	4b58      	ldr	r3, [pc, #352]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e0:	4a57      	ldr	r2, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e8:	4b55      	ldr	r3, [pc, #340]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a54      	ldr	r2, [pc, #336]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe ffac 	bl	8001058 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe ffa8 	bl	8001058 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0cb      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <HAL_RCC_OscConfig+0x334>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe ff96 	bl	8001058 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe ff92 	bl	8001058 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0b5      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	4b3e      	ldr	r3, [pc, #248]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ee      	bne.n	8002130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b39      	ldr	r3, [pc, #228]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	4a38      	ldr	r2, [pc, #224]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a1 	beq.w	80022b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216e:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d05c      	beq.n	8002234 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d141      	bne.n	8002206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <HAL_RCC_OscConfig+0x478>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe ff66 	bl	8001058 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe ff62 	bl	8001058 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e087      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	491b      	ldr	r1, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_OscConfig+0x478>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe ff3b 	bl	8001058 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe ff37 	bl	8001058 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e05c      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x416>
 8002204:	e054      	b.n	80022b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x478>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ff24 	bl	8001058 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ff20 	bl	8001058 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e045      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x470>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x444>
 8002232:	e03d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e038      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
 8002248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x4ec>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d028      	beq.n	80022ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d121      	bne.n	80022ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d11a      	bne.n	80022ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002284:	4293      	cmp	r3, r2
 8002286:	d111      	bne.n	80022ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	3b01      	subs	r3, #1
 8002296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0cc      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d90c      	bls.n	80022fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b65      	ldr	r3, [pc, #404]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b63      	ldr	r3, [pc, #396]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b8      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a58      	ldr	r2, [pc, #352]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800231e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a52      	ldr	r2, [pc, #328]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b50      	ldr	r3, [pc, #320]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	494d      	ldr	r1, [pc, #308]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d044      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d119      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237a:	2b03      	cmp	r3, #3
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3b      	ldr	r3, [pc, #236]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e067      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4934      	ldr	r1, [pc, #208]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fe52 	bl	8001058 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fe4e 	bl	8001058 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e04f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d20c      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e032      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4916      	ldr	r1, [pc, #88]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002446:	f000 f821 	bl	800248c <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490a      	ldr	r1, [pc, #40]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fdb2 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00
 800247c:	40023800 	.word	0x40023800
 8002480:	08003c34 	.word	0x08003c34
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b094      	sub	sp, #80	@ 0x50
 8002492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	647b      	str	r3, [r7, #68]	@ 0x44
 8002498:	2300      	movs	r3, #0
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800249c:	2300      	movs	r3, #0
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a4:	4b79      	ldr	r3, [pc, #484]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d00d      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x40>
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	f200 80e1 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024be:	e0db      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x204>)
 80024c2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80024c4:	e0db      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c6:	4b73      	ldr	r3, [pc, #460]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x208>)
 80024c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ca:	e0d8      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024cc:	4b6f      	ldr	r3, [pc, #444]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d6:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d063      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e2:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	099b      	lsrs	r3, r3, #6
 80024e8:	2200      	movs	r2, #0
 80024ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024fe:	4622      	mov	r2, r4
 8002500:	462b      	mov	r3, r5
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002510:	0150      	lsls	r0, r2, #5
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4621      	mov	r1, r4
 8002518:	1a51      	subs	r1, r2, r1
 800251a:	6139      	str	r1, [r7, #16]
 800251c:	4629      	mov	r1, r5
 800251e:	eb63 0301 	sbc.w	r3, r3, r1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002530:	4659      	mov	r1, fp
 8002532:	018b      	lsls	r3, r1, #6
 8002534:	4651      	mov	r1, sl
 8002536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800253a:	4651      	mov	r1, sl
 800253c:	018a      	lsls	r2, r1, #6
 800253e:	4651      	mov	r1, sl
 8002540:	ebb2 0801 	subs.w	r8, r2, r1
 8002544:	4659      	mov	r1, fp
 8002546:	eb63 0901 	sbc.w	r9, r3, r1
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800255a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255e:	4690      	mov	r8, r2
 8002560:	4699      	mov	r9, r3
 8002562:	4623      	mov	r3, r4
 8002564:	eb18 0303 	adds.w	r3, r8, r3
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	462b      	mov	r3, r5
 800256c:	eb49 0303 	adc.w	r3, r9, r3
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800257e:	4629      	mov	r1, r5
 8002580:	024b      	lsls	r3, r1, #9
 8002582:	4621      	mov	r1, r4
 8002584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002588:	4621      	mov	r1, r4
 800258a:	024a      	lsls	r2, r1, #9
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002592:	2200      	movs	r2, #0
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800259c:	f7fd fe14 	bl	80001c8 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025a8:	e058      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b38      	ldr	r3, [pc, #224]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	2200      	movs	r2, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	4611      	mov	r1, r2
 80025b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025c4:	4642      	mov	r2, r8
 80025c6:	464b      	mov	r3, r9
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	0159      	lsls	r1, r3, #5
 80025d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d6:	0150      	lsls	r0, r2, #5
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4641      	mov	r1, r8
 80025de:	ebb2 0a01 	subs.w	sl, r2, r1
 80025e2:	4649      	mov	r1, r9
 80025e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002600:	eb63 050b 	sbc.w	r5, r3, fp
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	00eb      	lsls	r3, r5, #3
 800260e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002612:	00e2      	lsls	r2, r4, #3
 8002614:	4614      	mov	r4, r2
 8002616:	461d      	mov	r5, r3
 8002618:	4643      	mov	r3, r8
 800261a:	18e3      	adds	r3, r4, r3
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	464b      	mov	r3, r9
 8002620:	eb45 0303 	adc.w	r3, r5, r3
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002646:	2200      	movs	r2, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	61fa      	str	r2, [r7, #28]
 800264c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002650:	f7fd fdba 	bl	80001c8 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCC_GetSysClockFreq+0x200>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800266c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800266e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x204>)
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002680:	4618      	mov	r0, r3
 8002682:	3750      	adds	r7, #80	@ 0x50
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	007a1200 	.word	0x007a1200

08002698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <HAL_RCC_GetHCLKFreq+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b4:	f7ff fff0 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0a9b      	lsrs	r3, r3, #10
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	08003c44 	.word	0x08003c44

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026dc:	f7ff ffdc 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0b5b      	lsrs	r3, r3, #13
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08003c44 	.word	0x08003c44

08002700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e042      	b.n	8002798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fa08 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 ffc9 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	@ 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d156      	bne.n	8002868 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_Transmit_DMA+0x26>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e04f      	b.n	800286a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2221      	movs	r2, #33	@ 0x21
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <HAL_UART_Transmit_DMA+0xd4>)
 80027f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f6:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <HAL_UART_Transmit_DMA+0xd8>)
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fe:	4a1f      	ldr	r2, [pc, #124]	@ (800287c <HAL_UART_Transmit_DMA+0xdc>)
 8002800:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	2200      	movs	r2, #0
 8002808:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3304      	adds	r3, #4
 800281e:	461a      	mov	r2, r3
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	f7fe fde5 	bl	80013f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	e853 3f00 	ldrex	r3, [r3]
 800283e:	617b      	str	r3, [r7, #20]
   return(result);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002850:	627a      	str	r2, [r7, #36]	@ 0x24
 8002852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	e841 2300 	strex	r3, r2, [r1]
 800285c:	61fb      	str	r3, [r7, #28]
   return(result);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e5      	bne.n	8002830 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	08002f69 	.word	0x08002f69
 8002878:	08003003 	.word	0x08003003
 800287c:	08003187 	.word	0x08003187

08002880 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d112      	bne.n	80028c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_Receive_DMA+0x26>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00b      	b.n	80028c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fcb0 	bl	800321c <UART_Start_Receive_DMA>
 80028bc:	4603      	mov	r3, r0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b090      	sub	sp, #64	@ 0x40
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e0:	2b80      	cmp	r3, #128	@ 0x80
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b21      	cmp	r3, #33	@ 0x21
 80028f6:	d128      	bne.n	800294a <HAL_UART_DMAStop+0x80>
 80028f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d025      	beq.n	800294a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	623b      	str	r3, [r7, #32]
   return(result);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800291e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fdae 	bl	80014a0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fd03 	bl	8003350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b22      	cmp	r3, #34	@ 0x22
 800296a:	d128      	bne.n	80029be <HAL_UART_DMAStop+0xf4>
 800296c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d025      	beq.n	80029be <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	60fb      	str	r3, [r7, #12]
   return(result);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002992:	61fa      	str	r2, [r7, #28]
 8002994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	617b      	str	r3, [r7, #20]
   return(result);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e5      	bne.n	8002972 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fd74 	bl	80014a0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fcf1 	bl	80033a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3740      	adds	r7, #64	@ 0x40
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	@ 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
 8002a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fd99 	bl	800355e <UART_Receive_IT>
      return;
 8002a2c:	e25b      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80de 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
 8002a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d1 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 81f2 	beq.w	8002edc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fd24 	bl	800355e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b20:	2b40      	cmp	r3, #64	@ 0x40
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_UART_IRQHandler+0x17a>
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04f      	beq.n	8002be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fc2c 	bl	80033a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d141      	bne.n	8002bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1d9      	bne.n	8002b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d013      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	4a7e      	ldr	r2, [pc, #504]	@ (8002da8 <HAL_UART_IRQHandler+0x3e0>)
 8002bb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fce2 	bl	8001580 <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00e      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9b2 	bl	8002f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9ae 	bl	8002f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e006      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f9aa 	bl	8002f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002bee:	e175      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	bf00      	nop
    return;
 8002bf2:	e173      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 814f 	bne.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8148 	beq.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8141 	beq.w	8002e9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	f040 80b6 	bne.w	8002dac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8145 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f080 813e 	bcs.w	8002ee0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c76:	f000 8088 	beq.w	8002d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d9      	bne.n	8002c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e1      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e3      	bne.n	8002d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e3      	bne.n	8002d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fb8b 	bl	80014a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8d5 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da6:	e09b      	b.n	8002ee0 <HAL_UART_IRQHandler+0x518>
 8002da8:	08003467 	.word	0x08003467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 808e 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8089 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002df6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002df8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e3      	bne.n	8002e0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e74:	61fa      	str	r2, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	617b      	str	r3, [r7, #20]
   return(result);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e3      	bne.n	8002e50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f85b 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9a:	e023      	b.n	8002ee4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_UART_IRQHandler+0x4f4>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 faea 	bl	800348e <UART_Transmit_IT>
    return;
 8002eba:	e014      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb2a 	bl	800352e <UART_EndTransmit_IT>
    return;
 8002eda:	e004      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee4:	bf00      	nop
  }
}
 8002ee6:	37e8      	adds	r7, #232	@ 0xe8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b090      	sub	sp, #64	@ 0x40
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d137      	bne.n	8002ff4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f86:	2200      	movs	r2, #0
 8002f88:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3314      	adds	r3, #20
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	623b      	str	r3, [r7, #32]
   return(result);
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e5      	bne.n	8002f8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fde:	61fa      	str	r2, [r7, #28]
 8002fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	617b      	str	r3, [r7, #20]
   return(result);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e5      	bne.n	8002fbe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ff2:	e002      	b.n	8002ffa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002ff4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ff6:	f7ff ff79 	bl	8002eec <HAL_UART_TxCpltCallback>
}
 8002ffa:	bf00      	nop
 8002ffc:	3740      	adds	r7, #64	@ 0x40
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff ff75 	bl	8002f00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b09c      	sub	sp, #112	@ 0x70
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d172      	bne.n	8003120 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800303a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303c:	2200      	movs	r2, #0
 800303e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003060:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003062:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003066:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800306e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	667b      	str	r3, [r7, #100]	@ 0x64
 800308c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003094:	647a      	str	r2, [r7, #68]	@ 0x44
 8003096:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800309a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	623b      	str	r3, [r7, #32]
   return(result);
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030be:	663b      	str	r3, [r7, #96]	@ 0x60
 80030c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d119      	bne.n	8003120 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0310 	bic.w	r3, r3, #16
 8003102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800310c:	61fa      	str	r2, [r7, #28]
 800310e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	617b      	str	r3, [r7, #20]
   return(result);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d106      	bne.n	800313c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800312e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003130:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003132:	4619      	mov	r1, r3
 8003134:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003136:	f7ff ff0b 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800313a:	e002      	b.n	8003142 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800313c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800313e:	f7ff fee9 	bl	8002f14 <HAL_UART_RxCpltCallback>
}
 8003142:	bf00      	nop
 8003144:	3770      	adds	r7, #112	@ 0x70
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	2b01      	cmp	r3, #1
 8003164:	d108      	bne.n	8003178 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	4619      	mov	r1, r3
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff feed 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003176:	e002      	b.n	800317e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff fed5 	bl	8002f28 <HAL_UART_RxHalfCpltCallback>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	2b80      	cmp	r3, #128	@ 0x80
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b21      	cmp	r3, #33	@ 0x21
 80031b8:	d108      	bne.n	80031cc <UART_DMAError+0x46>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2200      	movs	r2, #0
 80031c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80031c6:	68b8      	ldr	r0, [r7, #8]
 80031c8:	f000 f8c2 	bl	8003350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b22      	cmp	r3, #34	@ 0x22
 80031ec:	d108      	bne.n	8003200 <UART_DMAError+0x7a>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f000 f8d0 	bl	80033a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	f7ff fe95 	bl	8002f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b098      	sub	sp, #96	@ 0x60
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2222      	movs	r2, #34	@ 0x22
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	4a3e      	ldr	r2, [pc, #248]	@ (8003344 <UART_Start_Receive_DMA+0x128>)
 800324a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	4a3d      	ldr	r2, [pc, #244]	@ (8003348 <UART_Start_Receive_DMA+0x12c>)
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	4a3c      	ldr	r2, [pc, #240]	@ (800334c <UART_Start_Receive_DMA+0x130>)
 800325a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	2200      	movs	r2, #0
 8003262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	f7fe f8b8 	bl	80013f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80032c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e5      	bne.n	80032d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	617b      	str	r3, [r7, #20]
   return(result);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331c:	653b      	str	r3, [r7, #80]	@ 0x50
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3314      	adds	r3, #20
 8003324:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003326:	627a      	str	r2, [r7, #36]	@ 0x24
 8003328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6a39      	ldr	r1, [r7, #32]
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	61fb      	str	r3, [r7, #28]
   return(result);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3760      	adds	r7, #96	@ 0x60
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800301f 	.word	0x0800301f
 8003348:	0800314b 	.word	0x0800314b
 800334c:	08003187 	.word	0x08003187

08003350 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	@ 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	60bb      	str	r3, [r7, #8]
   return(result);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	61ba      	str	r2, [r7, #24]
 800337a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6979      	ldr	r1, [r7, #20]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	613b      	str	r3, [r7, #16]
   return(result);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	@ 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b095      	sub	sp, #84	@ 0x54
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3314      	adds	r3, #20
 80033e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	2b01      	cmp	r3, #1
 8003416:	d119      	bne.n	800344c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60bb      	str	r3, [r7, #8]
   return(result);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003438:	61ba      	str	r2, [r7, #24]
 800343a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	613b      	str	r3, [r7, #16]
   return(result);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e5      	bne.n	8003418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800345a:	bf00      	nop
 800345c:	3754      	adds	r7, #84	@ 0x54
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fd5b 	bl	8002f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b21      	cmp	r3, #33	@ 0x21
 80034a0:	d13e      	bne.n	8003520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034aa:	d114      	bne.n	80034d6 <UART_Transmit_IT+0x48>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d110      	bne.n	80034d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]
 80034d4:	e008      	b.n	80034e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	1c59      	adds	r1, r3, #1
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6211      	str	r1, [r2, #32]
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800350a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800351a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fccc 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b08c      	sub	sp, #48	@ 0x30
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b22      	cmp	r3, #34	@ 0x22
 8003570:	f040 80ae 	bne.w	80036d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357c:	d117      	bne.n	80035ae <UART_Receive_IT+0x50>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	b29a      	uxth	r2, r3
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80035ac:	e026      	b.n	80035fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c0:	d007      	beq.n	80035d2 <UART_Receive_IT+0x74>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <UART_Receive_IT+0x82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e008      	b.n	80035f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4619      	mov	r1, r3
 800360a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800360c:	2b00      	cmp	r3, #0
 800360e:	d15d      	bne.n	80036cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0220 	bic.w	r2, r2, #32
 800361e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800362e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	2b01      	cmp	r3, #1
 8003654:	d135      	bne.n	80036c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	613b      	str	r3, [r7, #16]
   return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 0310 	bic.w	r3, r3, #16
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	623a      	str	r2, [r7, #32]
 800367e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	61bb      	str	r3, [r7, #24]
   return(result);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b10      	cmp	r3, #16
 800369c:	d10a      	bne.n	80036b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fc48 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
 80036c0:	e002      	b.n	80036c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fc26 	bl	8002f14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e002      	b.n	80036d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3730      	adds	r7, #48	@ 0x30
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b0c0      	sub	sp, #256	@ 0x100
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	ea40 0301 	orr.w	r3, r0, r1
 8003704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003734:	f021 010c 	bic.w	r1, r1, #12
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003742:	430b      	orrs	r3, r1
 8003744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	ea40 0301 	orr.w	r3, r0, r1
 8003762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b8f      	ldr	r3, [pc, #572]	@ (80039a8 <UART_SetConfig+0x2cc>)
 800376c:	429a      	cmp	r2, r3
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0xa0>
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b8d      	ldr	r3, [pc, #564]	@ (80039ac <UART_SetConfig+0x2d0>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d104      	bne.n	8003786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7fe ffac 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003780:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003784:	e003      	b.n	800378e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003786:	f7fe ff93 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 800378a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003798:	f040 810c 	bne.w	80039b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037b6:	415b      	adcs	r3, r3
 80037b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037be:	4621      	mov	r1, r4
 80037c0:	eb12 0801 	adds.w	r8, r2, r1
 80037c4:	4629      	mov	r1, r5
 80037c6:	eb43 0901 	adc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ec:	462b      	mov	r3, r5
 80037ee:	eb49 0303 	adc.w	r3, r9, r3
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800380a:	460b      	mov	r3, r1
 800380c:	18db      	adds	r3, r3, r3
 800380e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003810:	4613      	mov	r3, r2
 8003812:	eb42 0303 	adc.w	r3, r2, r3
 8003816:	657b      	str	r3, [r7, #84]	@ 0x54
 8003818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800381c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003820:	f7fc fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b61      	ldr	r3, [pc, #388]	@ (80039b0 <UART_SetConfig+0x2d4>)
 800382a:	fba3 2302 	umull	r2, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	011c      	lsls	r4, r3, #4
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800383c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	1891      	adds	r1, r2, r2
 800384a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800384c:	415b      	adcs	r3, r3
 800384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003854:	4641      	mov	r1, r8
 8003856:	eb12 0a01 	adds.w	sl, r2, r1
 800385a:	4649      	mov	r1, r9
 800385c:	eb43 0b01 	adc.w	fp, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800386c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003874:	4692      	mov	sl, r2
 8003876:	469b      	mov	fp, r3
 8003878:	4643      	mov	r3, r8
 800387a:	eb1a 0303 	adds.w	r3, sl, r3
 800387e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003882:	464b      	mov	r3, r9
 8003884:	eb4b 0303 	adc.w	r3, fp, r3
 8003888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003898:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800389c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038a6:	4613      	mov	r3, r2
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038b6:	f7fc fc87 	bl	80001c8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <UART_SetConfig+0x2d4>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2264      	movs	r2, #100	@ 0x64
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	1acb      	subs	r3, r1, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038d6:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <UART_SetConfig+0x2d4>)
 80038d8:	fba3 2302 	umull	r2, r3, r3, r2
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038e4:	441c      	add	r4, r3
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003900:	415b      	adcs	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003908:	4641      	mov	r1, r8
 800390a:	1851      	adds	r1, r2, r1
 800390c:	6339      	str	r1, [r7, #48]	@ 0x30
 800390e:	4649      	mov	r1, r9
 8003910:	414b      	adcs	r3, r1
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003920:	4659      	mov	r1, fp
 8003922:	00cb      	lsls	r3, r1, #3
 8003924:	4651      	mov	r1, sl
 8003926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392a:	4651      	mov	r1, sl
 800392c:	00ca      	lsls	r2, r1, #3
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	4603      	mov	r3, r0
 8003934:	4642      	mov	r2, r8
 8003936:	189b      	adds	r3, r3, r2
 8003938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800393c:	464b      	mov	r3, r9
 800393e:	460a      	mov	r2, r1
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003954:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800395c:	460b      	mov	r3, r1
 800395e:	18db      	adds	r3, r3, r3
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003962:	4613      	mov	r3, r2
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800396a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800396e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003972:	f7fc fc29 	bl	80001c8 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <UART_SetConfig+0x2d4>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	@ 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3332      	adds	r3, #50	@ 0x32
 800398e:	4a08      	ldr	r2, [pc, #32]	@ (80039b0 <UART_SetConfig+0x2d4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4422      	add	r2, r4
 80039a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a4:	e106      	b.n	8003bb4 <UART_SetConfig+0x4d8>
 80039a6:	bf00      	nop
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039c6:	4642      	mov	r2, r8
 80039c8:	464b      	mov	r3, r9
 80039ca:	1891      	adds	r1, r2, r2
 80039cc:	6239      	str	r1, [r7, #32]
 80039ce:	415b      	adcs	r3, r3
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d6:	4641      	mov	r1, r8
 80039d8:	1854      	adds	r4, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb43 0501 	adc.w	r5, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	00eb      	lsls	r3, r5, #3
 80039ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ee:	00e2      	lsls	r2, r4, #3
 80039f0:	4614      	mov	r4, r2
 80039f2:	461d      	mov	r5, r3
 80039f4:	4643      	mov	r3, r8
 80039f6:	18e3      	adds	r3, r4, r3
 80039f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039fc:	464b      	mov	r3, r9
 80039fe:	eb45 0303 	adc.w	r3, r5, r3
 8003a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a22:	4629      	mov	r1, r5
 8003a24:	008b      	lsls	r3, r1, #2
 8003a26:	4621      	mov	r1, r4
 8003a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	008a      	lsls	r2, r1, #2
 8003a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a34:	f7fc fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4b60      	ldr	r3, [pc, #384]	@ (8003bc0 <UART_SetConfig+0x4e4>)
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	011c      	lsls	r4, r3, #4
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	61b9      	str	r1, [r7, #24]
 8003a60:	415b      	adcs	r3, r3
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a68:	4641      	mov	r1, r8
 8003a6a:	1851      	adds	r1, r2, r1
 8003a6c:	6139      	str	r1, [r7, #16]
 8003a6e:	4649      	mov	r1, r9
 8003a70:	414b      	adcs	r3, r1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a80:	4659      	mov	r1, fp
 8003a82:	00cb      	lsls	r3, r1, #3
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	00ca      	lsls	r2, r1, #3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	4642      	mov	r2, r8
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	008b      	lsls	r3, r1, #2
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aca:	4641      	mov	r1, r8
 8003acc:	008a      	lsls	r2, r1, #2
 8003ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ad2:	f7fc fb79 	bl	80001c8 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <UART_SetConfig+0x4e4>)
 8003ade:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2264      	movs	r2, #100	@ 0x64
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	1acb      	subs	r3, r1, r3
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	3332      	adds	r3, #50	@ 0x32
 8003af0:	4a33      	ldr	r2, [pc, #204]	@ (8003bc0 <UART_SetConfig+0x4e4>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003afc:	441c      	add	r4, r3
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b06:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	415b      	adcs	r3, r3
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	1851      	adds	r1, r2, r1
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	4649      	mov	r1, r9
 8003b24:	414b      	adcs	r3, r1
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b34:	4659      	mov	r1, fp
 8003b36:	00cb      	lsls	r3, r1, #3
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3e:	4651      	mov	r1, sl
 8003b40:	00ca      	lsls	r2, r1, #3
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4e:	464b      	mov	r3, r9
 8003b50:	460a      	mov	r2, r1
 8003b52:	eb42 0303 	adc.w	r3, r2, r3
 8003b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b62:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b70:	4649      	mov	r1, r9
 8003b72:	008b      	lsls	r3, r1, #2
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	008a      	lsls	r2, r1, #2
 8003b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b82:	f7fc fb21 	bl	80001c8 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <UART_SetConfig+0x4e4>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	@ 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	3332      	adds	r3, #50	@ 0x32
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <UART_SetConfig+0x4e4>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4422      	add	r2, r4
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc0:	51eb851f 	.word	0x51eb851f

08003bc4 <memset>:
 8003bc4:	4402      	add	r2, r0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d100      	bne.n	8003bce <memset+0xa>
 8003bcc:	4770      	bx	lr
 8003bce:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd2:	e7f9      	b.n	8003bc8 <memset+0x4>

08003bd4 <__libc_init_array>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c0c <__libc_init_array+0x38>)
 8003bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c10 <__libc_init_array+0x3c>)
 8003bda:	1b64      	subs	r4, r4, r5
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	2600      	movs	r6, #0
 8003be0:	42a6      	cmp	r6, r4
 8003be2:	d109      	bne.n	8003bf8 <__libc_init_array+0x24>
 8003be4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c14 <__libc_init_array+0x40>)
 8003be6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c18 <__libc_init_array+0x44>)
 8003be8:	f000 f818 	bl	8003c1c <_init>
 8003bec:	1b64      	subs	r4, r4, r5
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	42a6      	cmp	r6, r4
 8003bf4:	d105      	bne.n	8003c02 <__libc_init_array+0x2e>
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfc:	4798      	blx	r3
 8003bfe:	3601      	adds	r6, #1
 8003c00:	e7ee      	b.n	8003be0 <__libc_init_array+0xc>
 8003c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c06:	4798      	blx	r3
 8003c08:	3601      	adds	r6, #1
 8003c0a:	e7f2      	b.n	8003bf2 <__libc_init_array+0x1e>
 8003c0c:	08003c5c 	.word	0x08003c5c
 8003c10:	08003c5c 	.word	0x08003c5c
 8003c14:	08003c5c 	.word	0x08003c5c
 8003c18:	08003c60 	.word	0x08003c60

08003c1c <_init>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr

08003c28 <_fini>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	bf00      	nop
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr
